#!/usr/bin/env node
/**
 * API Routes Rule Generator
 * 
 * Scans routes/ directory and generates .cursor/rules/06-api-routes.mdc
 * with current API endpoints for AI context
 * 
 * Part of self-updating brain system - run via /maintenance command
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

/**
 * Extract route definitions from a route file
 * @param {string} filePath - Path to route file
 * @returns {Array} Array of route objects
 */
function extractRoutes(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const routes = [];
  const filename = path.basename(filePath);
  
  // Match router.METHOD(path, ...) patterns
  const routePattern = /router\.(get|post|put|patch|delete|all)\s*\(\s*["']([^"']+)["']/gi;
  
  let match;
  while ((match = routePattern.exec(content)) !== null) {
    const [, method, routePath] = match;
    
    // Find comment above the route (look backwards from match position)
    const beforeRoute = content.substring(0, match.index);
    const lines = beforeRoute.split('\n');
    let comment = '';
    
    // Look for comment on line(s) before route
    for (let i = lines.length - 1; i >= Math.max(0, lines.length - 5); i--) {
      const line = lines[i].trim();
      if (line.startsWith('//')) {
        comment = line.replace(/^\/\/\s*/, '');
        break;
      }
    }
    
    routes.push({
      method: method.toUpperCase(),
      path: routePath,
      comment,
      file: filename
    });
  }
  
  return routes;
}

/**
 * Scan all route files and extract endpoints
 * @returns {Object} Routes grouped by file
 */
function scanRoutes() {
  const routesDir = path.join(projectRoot, 'routes');
  const files = fs.readdirSync(routesDir).filter(f => f.endsWith('.js'));
  
  const routesByFile = {};
  
  for (const file of files) {
    const filePath = path.join(routesDir, file);
    const routes = extractRoutes(filePath);
    if (routes.length > 0) {
      routesByFile[file] = routes;
    }
  }
  
  return routesByFile;
}

/**
 * Generate the cursor rule content
 * @param {Object} routesByFile - Routes grouped by file
 * @returns {string} Markdown content for cursor rule
 */
function generateRuleContent(routesByFile) {
  const timestamp = new Date().toISOString().split('T')[0];
  
  let content = `---
globs: ["routes/**/*.js", "server.js"]
alwaysApply: false
---

# API Routes Reference

**Auto-generated from code** - Last updated: ${timestamp}

This rule is automatically updated by \`/maintenance\` command.

---

## 🎯 Purpose

Provides AI with current API endpoint definitions when working with backend routes.

**When loaded:** Working with route files, API integration, or backend debugging

---

## 📋 Current Endpoints

`;

  // Count total endpoints
  const totalRoutes = Object.values(routesByFile).reduce((sum, routes) => sum + routes.length, 0);
  content += `**Total Endpoints:** ${totalRoutes}\n\n`;
  
  // Group by file
  for (const [file, routes] of Object.entries(routesByFile)) {
    const basename = file.replace('.js', '');
    content += `### ${basename}\n\n`;
    content += `**File:** \`routes/${file}\`\n\n`;
    
    for (const route of routes) {
      content += `#### ${route.method} ${route.path}\n`;
      if (route.comment) {
        content += `${route.comment}\n`;
      }
      content += `\n`;
    }
    
    content += `---\n\n`;
  }
  
  // Add notes section
  content += `## 📝 Notes

- **Auth:** Most endpoints require Firebase ID token via \`Authorization\` header
- **User ID:** Populated by \`attachUserId\` middleware as \`req.userId\`
- **Billing:** Costly endpoints (TTS, image gen) may require active subscription
- **Environment:** Some endpoints disabled in production (check \`NODE_ENV\`)

---

## 🔄 How This Updates

This file is auto-generated by:
1. \`npm run docs:check\` (runs all generators)
2. \`/maintenance\` command (full maintenance workflow)

**Source:** \`scripts/generate-api-routes-rule.mjs\`

---

**Last scanned:** ${timestamp}
`;

  return content;
}

/**
 * Main execution
 */
function main() {
  console.log('🔍 Scanning API routes...');
  
  const routesByFile = scanRoutes();
  const totalRoutes = Object.values(routesByFile).reduce((sum, routes) => sum + routes.length, 0);
  
  console.log(`✅ Found ${totalRoutes} endpoints across ${Object.keys(routesByFile).length} files`);
  
  const content = generateRuleContent(routesByFile);
  const outputPath = path.join(projectRoot, '.cursor/rules/06-api-routes.mdc');
  
  fs.writeFileSync(outputPath, content, 'utf-8');
  console.log(`✅ Generated: ${outputPath}`);
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { scanRoutes, generateRuleContent };

